library(blogdown)
serve_site()
serve_site()
stop_server()
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
install.packages(c("cli", "cpp11", "data.table", "digest", "evaluate", "fBasics", "jsonlite", "markdown", "openssl", "processx", "ps", "rmarkdown", "sys", "timeSeries", "tinytex", "vctrs", "writexl", "xfun", "xts", "yaml"))
install.packages(c("cli", "cpp11", "data.table", "digest", "evaluate", "fBasics", "jsonlite", "markdown", "openssl", "processx", "ps", "rmarkdown", "sys", "timeSeries", "tinytex", "vctrs", "writexl", "xfun", "xts", "yaml"))
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library(blogdown)
blogdown::hugo_version()
library(blogdown)
serve_site()
stop_server()
serve_site()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
library(blogdown)
serve_site()
install.packages(c("blogdown", "bookdown"))
library(blogdown)
serve_site()
install.packages(c("bslib", "callr", "cli", "commonmark", "data.table", "digest", "evaluate", "fBasics", "ggplot2", "jsonlite", "lubridate", "maps", "markdown", "modelr", "openssl", "processx", "ps", "ragg", "rmarkdown", "roxygen2", "servr", "sys", "vctrs", "writexl", "xfun", "xts", "yaml", "zip"))
blogdown::check_hugo()
blogdown::check_netlify()
Check complete: netlify.toml
blogdown()
library(blogdown)
blogdown::check_hugo()
blogdown::check_config()
blogdown::check_netlify()
blogdown::check_hugo()
blogdown::check_hugo()
blogdown::check_hugo()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
blogdown::install_hugo("0.81.0")
serve_site()
system("hugo version")
blogdown::check_hugo()
blogdown::hugo_version()
stop_server()
serve_site()
stop_server()
serve_site()
library(blogdown)
serve_site()
blogdown::build_site()
blogdown::hugo_version()
blogdown::hugo_version()
clear
library(blogdown)
blogdown::check_hugo()
blogdown::check_hugo()
blogdown::check_hugo()
library(blogdown)
serve_site()
blogdown::build_site(run_hugo = TRUE)
serve_site()
hugo_versio
hugo_versio()
library(blogdown)
hugo_version()
serve_site()
serve_site()
blogdown::build_site()
library(blogdown)
serve_site()
library(blogdown)
blogdown::check_config()
blogdown::check_site()
blogdown::edit_draft(c(
"content/privacy.md",
"content/terms.md"
))
serve_site()
blogdown::find_hugo()
blogdown::check_site()
blogdown::edit_draft(c(
"content/privacy.md",
"content/terms.md"
))
library(blogdown)
serve_site()
library(blogdown)
library(blogdown)
?blogdown
serve_site()
install.packages("blogdown")
install.packages(c("bit", "bookdown", "broom", "bslib", "cli", "data.table", "digest", "evaluate", "gert", "highr", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "markdown", "openssl", "pkgbuild", "pkgdown", "pkgload", "png", "processx", "ps", "purrr", "rmarkdown", "roxygen2", "sass", "shiny", "stringr", "testthat", "timeDate", "tinytex", "vctrs", "whisker", "xfun", "yaml"))
library(blogdown)
install.packages(c("cli", "digest", "htmltools", "xfun", "yaml"))
library(blogdown)
serve_site()
library(blogdown)
serve_site()
blogdown::build_site()
blogdown::deploy_site()
?blogdown
blogdown::check_site()
blogdown::edit_draft(c(
"content/privacy.md",
"content/terms.md"
))
blogdown::build_site()
hugo_version()
library(blogdown)
serve_site()
blogdown::check_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
blogdown::build_site()
serve_site()
blogdown::check_site()
serve_site()
load("C:/github/FouedHamouda/.RData")
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
librar
library(blogdown)
serve_site()
library
library(blogdown)
serve_site()
stop_server()
serve_site()
install.packages("palmerpenguins")
install.packages("janitor")
install.packages("ggeasy")
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
stop_server()
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
library(blogdown)
serve_site()
stop_server()
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library()
library(blogdown)
serve_site()
source("~/.active-rstudio-document", echo=TRUE)
library(blogdown)
serve_site()
library(blogdown)
serve_site()
fs = function(x,epsilon,delta) dnorm(sinh(delta*asinh(x)-epsilon))*delta*cosh(delta*asinh(x)-epsilon)/sqrt(1+x^2)
vec = seq(-5,5,0.001)
plot(vec,fs(vec,0,1),type="l")
points(vec,fs(vec,1,1),type="l",col="red")
points(vec,fs(vec,-1,1),type="l",col="blue")
x = seq(-5,5,length=10000)
nor=dnorm(x,0,1)
plot(x,nor,type="l",col="green",main="symétrique", ylim=c(0,0.4),xlab="Valeurs de x",ylab="Densité de probabilité")
abline(v=0, col="red")
###### calcul de mode median moyenne#############
fs = function(x,epsilon,delta) dnorm(sinh(delta*asinh(x)-epsilon))*delta*cosh(delta*asinh(x)-epsilon)/sqrt(1+x^2)
x = seq(-5,5,length=10000)
plot(x,fs(x,0,1),type="l",ylim=c(0,0.5), xlab="Valeurs de x",ylab="Densité de probabilité")
syme=density(fs(x,0.8,1))
n <- length(syme$y)                       #$
dx <- mean(diff(syme$x))                  # Typical spacing in x $
y.unit <- sum(syme$y) * dx                # Check: this should integrate to 1 $
dx <- dx / y.unit                         # Make a minor adjustment
x.mean <- sum(syme$y * syme$x) * dx
y.mean <- syme$y[length(syme$x[syme$x < x.mean])] #$
x.mode <- syme$x[i.mode <- which.max(syme$y)]
y.mode <- syme$y[i.mode]                  #$
y.cs <- cumsum(syme$y)                    #$
x.med <- syme$x[i.med <- length(y.cs[2*y.cs <= y.cs[n]])] #$
y.med <- syme$y[i.med]                                    #$
#
# Plot the density and the statistics.
#
plot(syme, xlim=c(-0.2,0.2), type="l", col="green", xlab="valeur de x", main="Asymétrie à droite")
temp <- mapply(function(x,y,c) lines(c(x,x), c(0,y), col=c),
c(x.mean, x.med, x.mode),
c(y.mean, y.med, y.mode),
c("Blue", "Gray", "Red"))
install.packages("reticulate")
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
library(blogdown)
serve_site()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
library(blogdown)
serve_site()
blogdown::stop_server()
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
stop_server()
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
stop_server()
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
mytable<- Rdesc(data)
library(fdesc)
mytable<- Rdesc(data)
mytable
mytable<- desc(data)
mytable
export(mytable)
library(devtools)
library(fdesc)
#devtools::install_github("Foha2001/fdesc")
stop_server()
serve_site()
library(blogdown)
serve_site()
stop_server()
